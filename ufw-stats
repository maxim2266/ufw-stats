#!/usr/bin/env python3
'''
BSD 3-Clause License

Copyright (c) 2021, Maxim Konakov
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''

from sys import exit, stdin, stdout, argv
from signal import signal, strsignal, SIGHUP, SIGINT, SIGTERM

# install signal handlers
def sig_handler(sig, _):
	exit(f'{strsignal(sig)} [{sig}]')

signal(SIGHUP, sig_handler)
signal(SIGINT, sig_handler)
signal(SIGTERM, sig_handler)

# we don't use stdin here
stdin.close()

# main imports
from re import compile as regex
from subprocess import PIPE, Popen as popen
from urllib.request import urlopen
from urllib.error import HTTPError
from ssl import create_default_context as ssl_default_context
from http import HTTPStatus
from json import load as read_json, JSONDecodeError
from ipaddress import ip_address, ip_interface, summarize_address_range as ip_range
from socket import gethostbyaddr
from itertools import compress as choose

# little helper
failed = lambda d: 'ERROR' in d

# RIPE query constructor
# see: https://www.ripe.net/manage-ips-and-asns/db/registration-data-access-protocol-rdap
def construct_whois_query(url_prefix = 'https://rdap.db.ripe.net/ip/'):
	# error message formatting
	subst_prefix = regex(r'^<?urlopen error\s+').sub

	def fmt_err(err):
		return subst_prefix('', str(err)).rstrip('>')

	# SSL context
	ctx = ssl_default_context()

	# prevent the "[SSL: DH_KEY_TOO_SMALL] dh key too small" error
	ctx.set_ciphers('ALL@SECLEVEL=1')	# or 'DEFAULT@SECLEVEL=1'

	def get(addr):
		def error(msg):
			return { 'ERROR': f'RIPE query for {addr} failed: {msg}' }

		try:
			with urlopen(url_prefix + addr, context = ctx, timeout = 5) as resp:
				resp = read_json(resp)
		except JSONDecodeError as err:
			return error(f'invalid JSON response: {err.msg}')
		except HTTPError as err:
			return error(f'{err.code} {HTTPStatus(err.code).phrase}')
		except OSError as err:
			return error(fmt_err(err))

		if 'errorCode' not in resp:
			return resp

		try:
			status = HTTPStatus(int(resp['errorCode']))
		except ValueError:
			return error(f'unexpected error code "{resp["errorCode"]}" in JSON response')
		else:
			return error(f'{status.value} {status.phrase}')

	return get

# RIPE response mapper
def map_resp(s):
	if failed(s):
		return s

	def error(msg):
		return { 'ERROR': 'invalid JSON response: ' + msg }

	try:
		res = dict(NET = tuple(ip_range(ip_address(s['startAddress']), ip_address(s['endAddress']))))
	except KeyError as err:
		return error(f'parameter {err} is missing')

	try:
		res.update(NAME = s['name'].strip())
	except KeyError:
		pass

	try:
		res.update(COUNTRY = s['country'].strip().upper())
	except KeyError:
		pass

	try:
		res.update(DESCR = s['remarks'][0]['description'][0].strip())
	except (KeyError, IndexError):
		pass

	return res

# constructor for ip address info function
def construct_whois():
	# list of networks
	ip_nets = []	# of (IPNetwork, info)

	# RIPE query instance
	ask_who_is = construct_whois_query()

	def get(addr, info):
		for n, data in ip_nets:
			if addr in n:
				info.update(data)
				return

		data = map_resp(ask_who_is(addr.compressed))

		if not failed(data):
			nets = data['NET']
			ip_nets.extend(( (n, data) for n in nets ))
			data['NET'] = ','.join(map(str, nets))

		info.update(data)

	# return from construct_whois()
	return get

# ip address info function
whois = construct_whois()

# local interfaces data loader
def local_ip_net():
	cmd = [ 'ip', '-j', '-p', 'address', 'show', 'up' ]

	try:
		with popen(cmd, stdout = PIPE, text = True) as src:
			s = read_json(src.stdout)

			src.communicate()

			if src.returncode != 0:
				exit(src.returncode)
	except JSONDecodeError as err:
		exit('invalid JSON in local interface data: ' + err.msg)
	except Exception as err:
		exit('cannot read local interface data: ' + str(err))

	net = lambda x: ip_interface(f'{x["local"]}/{x["prefixlen"]}').network
	pair = lambda x: (x['ifname'], tuple(map(net, x['addr_info'])))

	ints = dict(( pair(i) for i in s if i.get('addr_info') ))

	def get(addr, itf):
		try:
			for n in ints[itf]:
				if addr in n:
					return str(n)
		except KeyError:
			pass

	return get

get_local_ip_net = local_ip_net()

# ip address scope
def ip_scope(addr):
	s = tuple(choose(
		('multicast', 'private', 'global', 'unspecified', 'reserved', 'loopback', 'link_local'),
		(addr.is_multicast, addr.is_private, addr.is_global, addr.is_unspecified, addr.is_reserved, addr.is_loopback, addr.is_link_local)
	))

	return s if s else ('unknown',)

# ip address analyser
def get_addr_info(addr, itf):
	scope = ip_scope(addr)
	info = { 'IP': addr.compressed, 'SCOPE': scope }

	# host name
	if ('private' in scope or 'global' in scope) and 'multicast' not in scope:
		try:
			info['HOST'] = gethostbyaddr(addr.compressed)[0]
		except OSError as err:
			if err.errno != 1:
				info['ERROR'] = f'error: host name query for {addr.compressed} failed: {err}'
				return info

	# other info
	if itf:
		info['IF'] = itf
		net = get_local_ip_net(addr, itf)

		if net:
			info['NET'] = net
	elif 'global' in scope:
		whois(addr, info)

	return info

# construct iterator over ufw actions
def ufw_action_iterator(src):
	# address cache: { interface -> { addr.compressed -> info } }
	# because a computer can have several network interfaces with the same ip address,
	# see: https://serverfault.com/questions/705919/the-same-ip-on-multiple-interfaces
	addr_cache = {}

	# address info composer
	def addr_info(rec, ip_key, port_key, itf_key):
		try:
			addr, itf = ip_address(rec[ip_key]), rec.pop(itf_key) or ''
		except KeyError as err:
			exit(f'key {err} is missing from journalctl output')

		try:
			info = addr_cache[itf][addr.compressed]
		except KeyError:
			info = get_addr_info(addr, itf)
			addr_cache.setdefault(itf, {})[addr.compressed] = info

		info = dict(info)	# make a copy

		try:
			info['PORT'] = int(rec.pop(port_key))
		except (KeyError, ValueError):
			pass

		rec[ip_key] = info

	wanted = regex(r'^(?:IN|OUT|SRC|DST|PROTO|SPT|DPT)=').match

	def make_rec(m):
		act, ts, s = m.group(1), m.string[:m.start()], m.string[m.end():]
		rec = dict(( x.split('=', 1) for x in s.split() if wanted(x) ))

		rec.update(TS = ts, ACTION = act)

		addr_info(rec, 'DST', 'DPT', 'IN')
		addr_info(rec, 'SRC', 'SPT', 'OUT')

		return rec

	match_sep = regex(r'\s+kernel:\s+\[UFW\s+([A-Z]+)\]').search

	return map(make_rec, filter(None, map(match_sep, src)))

# iterator over a file
def file_iterator(file_name):
	with open(file_name) as f:
		yield from ufw_action_iterator(f)

# iterator over journalctl output
def log_iterator(tail, num_actions):
	cmd = ['journalctl',
				'--no-pager',
				'--no-hostname',
				'-o', 'short-iso-precise',
				'-k',
				'-q',
				'-g', r'\[UFW [A-Z]+\]']

	if num_actions >= 0:
		cmd += ['-n', str(num_actions)]

	if tail:
		cmd.append('-f')

	with popen(cmd, stdout = PIPE, text = True) as src:
		yield from ufw_action_iterator(src.stdout)

		src.communicate()

		if src.returncode != 0:
			exit(src.returncode)

# JSON printer
def print_json(actions):
	from json import JSONEncoder

	encode = JSONEncoder(ensure_ascii = False).encode

	print('[', encode(next(actions)))

	for act in actions:
		print(',', encode(act))

	print(']')

# plain text printer
def action_text(data):
	return f'''\
TS:     {data.get("TS", "n/a").replace("T", " ")}
ACTION: {data.get("ACTION", "n/a")}
PROTO:  {data.get("PROTO", "n/a")}'''

def ip_text(info, key):
	data = info[key]
	data['SCOPE'] = ','.join(data['SCOPE'])

	if failed(data):
		return f'''\
{key}:
  SCOPE: {data.get("SCOPE", "n/a")}
  IF:    {data.get("IF", "n/a")}
  IP:    {data.get("IP", "n/a")}
  PORT:  {data.get("PORT", "n/a")}
  HOST:  {data.get("HOST", "n/a")}
  ERROR: {data.get("ERROR")}'''
	else:
		return f'''\
{key}:
  SCOPE:   {data.get("SCOPE", "n/a")}
  IF:      {data.get("IF", "n/a")}
  IP:      {data.get("IP", "n/a")}
  PORT:    {data.get("PORT", "n/a")}
  HOST:    {data.get("HOST", "n/a")}
  NET:     {data.get("NET", "n/a")}
  NAME:    {data.get("NAME", "n/a")}
  DESCR:   {data.get("DESCR", "n/a")}
  COUNTRY: {data.get("COUNTRY", "n/a")}'''

def print_text(actions):
	for act in actions:
		print('\n'.join((action_text(act), ip_text(act, 'SRC'), ip_text(act, 'DST'), '')))

# usage string with optional error message
def usage(msg = ''):
	from os.path import basename

	msg = f'error: {msg}\n\n' if msg else ''

	exit(f'''\
{msg}Usage: {basename(argv[0])} [OPTION]...
  Show ufw actions since boot, with ip address information from RIPE database.

Options:
  -j, --json          produce JSON optput instead of plain text
  -o, --output=FILE   direct output to the FILE
  -f, --follow        tail the log (continuously print new entries)
  -n, --num-actions=N show N most recent firewall actions
  -h, --help          show this message and exit
''')

# command line parser
from getopt import gnu_getopt, GetoptError

try:
	opts, args = gnu_getopt(argv[1:], 'jho:n:f', ('help', 'json', 'output=', 'num-actions=', 'follow', 'file='))
except GetoptError as err:
	usage(str(err))

if args:
	usage('unexpected command line argument: ' + args[0])

run, fin, fout, tail, n = print_text, None, None, False, -1

valid_num = regex(r'^(?:0|[1-9][0-9]*)$').match

for opt, arg in opts:
	if opt in ('-h', '--help'):
		usage()
	elif opt in ('-j', '--json'):
		run = print_json
	elif opt in ('-o', '--output'):
		fout = arg
	elif opt in ('-n', '--num-actions'):
		if not valid_num(arg):
			usage(f'argument for -n,--num-actions must be a non-negative integer, not "{arg}"')

		n = int(arg)
	elif opt in ('-f', '--follow'):
		tail = True
	elif opt == '--file':	# for debugging only
		fin = arg
	else:
		exit('panic: unhandled option: ' + opt)

# script invocation
from contextlib import redirect_stdout

try:
	with redirect_stdout(open(fout, 'w')) if fout else stdout:
		run(file_iterator(fin) if fin else log_iterator(tail, n))
except OSError as err:
	exit(f'error: {err}')
